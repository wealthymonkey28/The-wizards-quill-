<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ðŸª¶ The Little Wizard's Quill âœ¨</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

```
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }

    .container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 40px;
        max-width: 800px;
        width: 100%;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        animation: fadeIn 0.8s ease-out;
    }

    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(30px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .header {
        text-align: center;
        margin-bottom: 30px;
    }

    .title {
        font-size: 2.5rem;
        color: #4a5568;
        margin-bottom: 10px;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
    }

    .subtitle {
        font-size: 1.1rem;
        color: #718096;
        line-height: 1.6;
        max-width: 600px;
        margin: 0 auto;
    }

    .input-section {
        margin-bottom: 30px;
    }

    .input-container {
        position: relative;
        margin-bottom: 20px;
    }

    .input-field {
        width: 100%;
        padding: 20px;
        font-size: 1.1rem;
        border: 3px solid #e2e8f0;
        border-radius: 15px;
        background: white;
        transition: all 0.3s ease;
        outline: none;
    }

    .input-field:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        transform: translateY(-2px);
    }

    .generate-btn {
        width: 100%;
        padding: 18px;
        font-size: 1.2rem;
        font-weight: 600;
        color: white;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        border-radius: 15px;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .generate-btn:hover {
        transform: translateY(-3px);
        box-shadow: 0 10px 25px rgba(102, 126, 234, 0.4);
    }

    .generate-btn:active {
        transform: translateY(-1px);
    }

    .generate-btn:disabled {
        opacity: 0.7;
        cursor: not-allowed;
        transform: none;
    }

    .loading {
        display: none;
        text-align: center;
        margin: 20px 0;
        color: #667eea;
        font-style: italic;
    }

    .loading.active {
        display: block;
    }

    .spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(102, 126, 234, 0.3);
        border-radius: 50%;
        border-top-color: #667eea;
        animation: spin 1s ease-in-out infinite;
        margin-right: 10px;
    }

    @keyframes spin {
        to { transform: rotate(360deg); }
    }

    .story-output {
        background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
        border-radius: 15px;
        padding: 30px;
        margin-top: 30px;
        min-height: 200px;
        border-left: 5px solid #667eea;
        display: none;
        animation: slideIn 0.5s ease-out;
    }

    .story-output.active {
        display: block;
    }

    @keyframes slideIn {
        from { opacity: 0; transform: translateX(-30px); }
        to { opacity: 1; transform: translateX(0); }
    }

    .story-title {
        font-size: 1.4rem;
        color: #4a5568;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .story-content {
        font-size: 1.1rem;
        line-height: 1.8;
        color: #2d3748;
        white-space: pre-wrap;
    }

    .examples {
        margin-top: 20px;
        padding: 20px;
        background: rgba(102, 126, 234, 0.1);
        border-radius: 10px;
    }

    .examples h3 {
        color: #4a5568;
        margin-bottom: 10px;
    }

    .example-buttons {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }

    .example-btn {
        padding: 8px 15px;
        background: white;
        border: 2px solid #667eea;
        color: #667eea;
        border-radius: 20px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 0.9rem;
    }

    .example-btn:hover {
        background: #667eea;
        color: white;
        transform: translateY(-2px);
    }

    .error {
        background: #fed7d7;
        color: #c53030;
        padding: 15px;
        border-radius: 10px;
        margin-top: 20px;
        border-left: 5px solid #c53030;
    }

    @media (max-width: 600px) {
        .container {
            padding: 20px;
            margin: 10px;
        }
        
        .title {
            font-size: 2rem;
        }
        
        .input-field, .generate-btn {
            padding: 15px;
        }
    }
</style>
```

</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title">ðŸª¶ The Little Wizard's Quill âœ¨</h1>
            <p class="subtitle">
                Transform random keystrokes into magical stories! Type anythingâ€”gibberish, random characters, 
                or what your little one typedâ€”and watch AI find hidden meaning and create enchanting tales.
            </p>
        </div>

```
    <div class="input-section">
        <div class="input-container">
            <input 
                type="text" 
                id="userInput" 
                class="input-field" 
                placeholder="Type random characters... e.g., kjhgfd, asdfgh, or Hdfclife"
                maxlength="200"
            >
        </div>
        
        <button id="generateBtn" class="generate-btn">
            âœ¨ Reveal the Hidden Story âœ¨
        </button>
    </div>

    <div class="examples">
        <h3>Try these examples:</h3>
        <div class="example-buttons">
            <button class="example-btn" data-example="kjhgfdsa">kjhgfdsa</button>
            <button class="example-btn" data-example="Hdfclife">Hdfclife</button>
            <button class="example-btn" data-example="qqwweerr">qqwweerr</button>
            <button class="example-btn" data-example="zxcvbnm">zxcvbnm</button>
            <button class="example-btn" data-example="123abc">123abc</button>
            <button class="example-btn" data-example="mmmkkk">mmmkkk</button>
        </div>
    </div>

    <div class="loading" id="loading">
        <div class="spinner"></div>
        Consulting the quill... âœ¨
    </div>

    <div class="story-output" id="storyOutput">
        <h2 class="story-title">
            <span>ðŸª¶</span>
            <span>Your Mystical Story</span>
        </h2>
        <div class="story-content" id="storyContent"></div>
    </div>
</div>

<script>
    // Simulated AI story generation (replace with actual API call)
    const storyTemplates = [
        {
            pattern: /[a-z]{4,}/i,
            generator: (input) => `In the mystical land of ${input.charAt(0).toUpperCase() + input.slice(1)}, there lived a curious creature named Whiskers. Every morning, Whiskers would venture into the enchanted forest, searching for the legendary Crystal of Understanding.\n\nOne day, while following a trail of shimmering letters that spelled "${input}", Whiskers discovered a hidden grove where words grew on trees like fruit. The ancient Tree of Stories whispered, "Those who can find meaning in chaos possess the greatest magic of all."\n\nWhiskers learned that even the most random combinations of letters held secret messages from the universe, waiting to be discovered by those brave enough to look beyond the surface.`
        },
        {
            pattern: /\d/,
            generator: (input) => `Captain Nova's spaceship received a mysterious transmission: "${input}". The ship's AI couldn't decode it, but Nova knew betterâ€”sometimes the most important messages come disguised as random noise.\n\nAs Nova input the sequence into the ancient Galactic Archive, something extraordinary happened. The letters and numbers rearranged themselves, revealing coordinates to a lost planet where creativity itself was born.\n\nThe journey to this world would be perilous, but Nova understood that within every seemingly meaningless string of characters lay the seeds of infinite possibility, waiting for the right explorer to unlock their secrets.`
        },
        {
            pattern: /.*/,
            generator: (input) => `In Professor Luna's Laboratory of Lost Languages, the string "${input}" appeared on her quantum typewriterâ€”a device that translated thoughts from parallel dimensions.\n\nAs Luna studied the mysterious characters, she realized they weren't random at all. They were a greeting from a civilization that communicated entirely through what others might consider gibberish. Each letter combination was a window into their world of pure imagination.\n\nWith trembling hands, Luna typed back her own string of "nonsense," beginning the first conversation between worlds that spoke the language of creative chaos. Sometimes, she thought, the most profound communication happens when we abandon the need to make conventional sense.`
        }
    ];

    function generateStory(input) {
        // Find the best matching template
        const template = storyTemplates.find(t => t.pattern.test(input)) || storyTemplates[storyTemplates.length - 1];
        return template.generator(input);
    }

    function simulateAPICall(input) {
        return new Promise((resolve) => {
            // Simulate API delay
            setTimeout(() => {
                const story = generateStory(input);
                resolve({ story });
            }, 1500 + Math.random() * 1000); // 1.5-2.5 seconds
        });
    }

    // Event listeners
    document.getElementById('generateBtn').addEventListener('click', async function() {
        const input = document.getElementById('userInput').value.trim();
        
        if (!input) {
            alert('Please enter some text first! ðŸ¤”');
            return;
        }

        const btn = this;
        const loading = document.getElementById('loading');
        const storyOutput = document.getElementById('storyOutput');
        const storyContent = document.getElementById('storyContent');

        // Show loading state
        btn.disabled = true;
        btn.textContent = 'Consulting the Quill...';
        loading.classList.add('active');
        storyOutput.classList.remove('active');

        try {
            // In a real app, replace this with your actual API call
            // const response = await fetch('/api/generate-story', { ... });
            const result = await simulateAPICall(input);
            
            // Display the story
            storyContent.textContent = result.story;
            storyOutput.classList.add('active');
            
        } catch (error) {
            // Handle errors
            storyContent.innerHTML = `<div class="error">
                <strong>Oops!</strong> The quill is out of ink. Please try again in a moment! ðŸª¶
            </div>`;
            storyOutput.classList.add('active');
        } finally {
            // Reset UI
            btn.disabled = false;
            btn.textContent = 'âœ¨ Reveal the Hidden Story âœ¨';
            loading.classList.remove('active');
        }
    });

    // Example buttons
    document.querySelectorAll('.example-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const example = this.dataset.example;
            document.getElementById('userInput').value = example;
            document.getElementById('userInput').focus();
        });
    });

    // Enter key support
    document.getElementById('userInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            document.getElementById('generateBtn').click();
        }
    });

    // Auto-focus input
    document.getElementById('userInput').focus();
</script>
```

</body>
</html>